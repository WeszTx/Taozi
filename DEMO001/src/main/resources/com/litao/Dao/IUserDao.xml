<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.litao.Dao.IUserDao">
    <!--开启user支持二级缓存-->
    <cache/>
    <!--配置查询结果的列名和实体类的属性名的对应关系-->
    <resultMap id="userMap" type="user">
        <!--主键-->
        <id property="id" column="id"/>
        <!--非主键-->
        <result property="username" column="username"/>
        <result property="birthday" column="birthday"/>
        <result property="sex" column="sex"/>
        <result property="address" column="address"/>
        <!--一对多映射配置-->
        <collection property="accountList" ofType="Account">
            <id property="ID" column="AID"/>
            <result property="MONEY" column="MONEY"/>
            <result property="UID" column="UID"/>
        </collection>
    </resultMap>

    <!--抽取重复的sql-->
    <sql id="defaultSelect">
        select * from user001
    </sql>


    <select id="selectAll" resultMap="userMap">
        SELECT * FROM USER LEFT JOIN account a ON `user`.id=a.UID
        <!--select * from user001 ;-->
    </select>

    <insert id="addOne" parameterType="User">
        <!--插入后获取插入数据id值-->
        <selectKey keyProperty="id" order="AFTER" resultType="integer">
            select last_insert_id();
        </selectKey>
        insert into user001(username,birthday,sex,address) values (#{username},#{birthday},#{sex},#{address});
    </insert>

    <update id="updateOne" parameterType="User">
        update user001 set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id};
    </update>

    <delete id="deleteOne" parameterType="int">
        delete from user001 where id=#{id};
    </delete>


<!--    <select id="findById" parameterType="int" resultMap="userMap">
        select * from USER001 where id=#{uid};
    </select>-->

    <!--延迟加载-->
    <select id="findById" parameterType="int" resultType="User">
        select * from USER where id=#{uid};
    </select>

    <select id="findByName" parameterType="string" resultMap="userMap">
        select * from user001 where username like #{name}
        <!--select * from user001 where username like '%${value}%';-->

   </select>

   <select id="countAll" resultType="int">
       select count(*) from user001;
   </select>
    <select id="findUserByVO" parameterType="queryvo" resultMap="userMap">
        select * from user001 where username like #{user.username};
    </select>

    <select id="findUserByCondition" parameterType="User" resultMap="userMap">
       <!--select * from user001 where  1=1-->
        select * from user001
        <where>
            <if test="username != null">
                and username=#{username}
            </if>
            <if test="sex !=null">
                and sex =#{sex}
            </if>
        </where>

    </select>

    <select id="findUserInIds" parameterType="QueryVO" resultMap="userMap">
        select * from user001
        <where>
            <if test="idlist != null and idlist.size>0">
                <foreach collection="idlist" open="and id in ("  close=" )" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>

</mapper>